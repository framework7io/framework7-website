extends ../_docs-template

block vars
  - var title = 'List View (Table View) | Framework7 Documentation';

block docs-index

block content


  .docs-nav
    include ../_docs-menu
  .docs-content

    h1 List View (Table View)
    p List views are versatile and powerful user interface components frequently found in apps. A list view presents data in a scrollable list of multiple rows that may be divided into sections/groups.
    p List views have many purposes:
    ul
      li To let users navigate through hierarchically structured data
      li To present an indexed list of items
      li To display detail information and controls in visually distinct groupings
      li To present a selectable list of options
    h2 List View Block
    p List block is your list view elements wrapper.
    p So first of all, all your list view elements should be wrapped with `<div class="list">` element:
    :code(lang="html")
         <div class="list">
             <ul>
                 ... list elements here ...
             </ul>
         </div>
    p To add extra highlighting to list block we need additional `list-strong` class
    :code(lang="html")
          <div class="list list-strong">
            <!-- block content -->
          </div>
    p To add outline (borders) around the list block we need additional `list-outline` class:
    :code(lang="html")
          <div class="list list-outline">
              <ul>
                  ... list elements here ...
              </ul>
          </div>
    p To add dividers (borders) between list items we need additional `list-dividers` class:
    :code(lang="html")
          <div class="list list-dividers">
              <ul>
                  ... list elements here ...
              </ul>
          </div>
    p To make list block inset we need additional `inset` class:
    :code(lang="html")
          <div class="list inset">
              <ul>
                  ... list elements here ...
              </ul>
          </div>
    p To make block inset only on large screens we need to use `medium-inset` (>= 768px) class instead:
    :code(lang="html")
          <div class="list medium-inset">
              <ul>
                  ... list elements here ...
              </ul>
          </div>
    p For full set of such responsive classes check #[a(href="grid.html#column-sizes") Grid docs]. They are `xsmall-inset`, `small-inset`, `medium-inset`, `large-inset`, `xlarge-inset`.
    h2 List Item
    p Single list element has pretty complex but flexible layout:
    :code(lang="html")
          <li>
              <div class="item-content">
                  <div class="item-media">
                      <i class="icon my-icon"></i>
                  </div>
                  <div class="item-inner">
                      <div class="item-title">
                          List element title
                      </div>
                      <div class="item-after">
                          List element label
                      </div>
                  </div>
              </div>
          </li>
    p Where:
    ul
      li
        p `item-content` - main flex wrapper for `item-media` and `item-inner`. <strong>Required</strong> element.
      ul
        li
          p `item-media` - container for your media element like icon, image, etc. <strong>Optional</strong> element.
        li
          p `item-inner` - main flex wrapper for `item-title` and `item-after`. <strong>Required</strong> element.
        ul
          li
            p `item-title` - single-line list item title. <strong>Required</strong> element.
          li
            p `item-after` - list item label. Could contain any additional HTML elements, like label text, or badge, or switch/toggle or button, etc. <strong>Optional</strong> element.
    .important-note
      ul
        li
          p Because .item-content is actually CSS flex-box element, note that <strong>`item-media` and `item-inner` should be direct children of `item-content`</strong>!
        li
          p For the same reason <strong>`item-title` and `item-after` should be direct children of `item-inner`</strong>!
    p Also note that if your list item has nothing additional, you can user `item-content` class on `<li>` element:
    :code(lang="html")
          <li class="item-content">
              <div class="item-media">
                  <i class="icon my-icon"></i>
              </div>
              <div class="item-inner">
                  <div class="item-title">
                      List element title
                  </div>
                  <div class="item-after">
                      List element label
                  </div>
              </div>
          </li>
    h2 List Item Header/Footer
    p If we need to add list item header/footer text in addition to item's title we can use `item-header` and `item-footer` elements:
    :code(lang="html")
          <li>
            <div class="item-content">
              <div class="item-media">
                <i class="icon my-icon"></i>
              </div>
              <div class="item-inner">
                <div class="item-title">
                  <!-- Item header, must be first child of item-title -->
                  <div class="item-header">Item header text</div>
                  List element title
                  <!-- Item footer, must be last child of item-title -->
                  <div class="item-footer">Item footer text</div>
                </div>
                <div class="item-after">...</div>
              </div>
            </div>
          </li>
    h2 Link Item
    p Of course in most cases we need to use list view elements as links (&lt;a&gt;) to other pages or data. In this case we need to wrap `item-content` with `<a class="item-link">` element:
    :code(lang="html")
          <li>
            <a href="#" class="item-link">
              <div class="item-content">
                <div class="item-media">...</div>
                <div class="item-inner">...</div>
              </div>
            </a>
          </li>
    p If your links contains nothing except "item-content" then we can just use link as "item-content":
    :code(lang="html")
          <li>
            <a href="#" class="item-link item-content">
              <div class="item-media">...</div>
              <div class="item-inner">...</div>
            </a>
          </li>
    .important-note
      p
        strong Note that `item-inner` has additional right padding and chevron icon when it is in `item-link`
      p To remove this chevron icon and extra padding, you can add `no-chevron` class to link item or to containing list
    h2 List Button
    p List button is a simplified list link item, useful in case you need to trigger simple self-explaining actions:
    :code(lang="html")
      <li>
        <a class="list-button">List Button 1</a>
      </li>
      <li>
        <a class="list-button">List Button 2</a>
      </li>

    h2 Grouped Lists
    p Sometimes we need to group list view elements inside of single list block. In this case we need to additional `list-group` elements:
    :code(lang="html")
           <div class="list">
             <!-- First group-->
             <div class="list-group">
               <ul>
                 <li class="list-group-title">First group</li>
                 <li class="item-content">...</li>
                 <li class="item-content">...</li>
                 ...
               </ul>
             </div>

             <!-- Second group-->
             <div class="list-group">
               <ul>
                 <li class="list-group-title">Second Group</li>
                 <li class="item-content">...</li>
                 <li class="item-content">...</li>
                 ...
               </ul>
             </div>
           </div>

    h2 Simple List
    p In case we need list with simple items structure that have only titles, we may use Simple List modification. In this case we need additional class `simple-list` on list block with plain `<li>` items layout:
    :code(lang="html")
          <div class="list simple-list">
            <ul>
              <li>Item 1</li>
              <li>Item 2</li>
              <li>Item 3</li>
              <li>Item 4</li>
              ...
            </ul>
          </div>
    h2 Links List
    p In case we need list with simple link items structure that have only titles, we may use Links List modification. In this case we need additional class `links-list` on list block with plain `<li><a>...</a></li>` items layout:
    :code(lang="html")
          <div class="list list-strong-ios list-outline-ios list-dividers-ios links-list">
            <ul>
              <li>
                <a href="#">Link Item 1</a>
              </li>
              <li>
                <a href="#">Link Item 2</a>
              </li>
              <li>
                <a href="#">Link Item 3</a>
              </li>
              ...
            </ul>
          </div>
    h2 Media List
    p Media list view is extended case of List View intended to display more complex data like products, services, users, etc. In this case we need additional `media-list` class on list block.
    p And of course it has a bit more complex layout:
    :code(lang="html")
          <!-- Media list block has additional "media-list" class -->
          <div class="list media-list">
            <ul>
              <li>
                <div class="item-content">
                  <div class="item-media">
                    <img src="path/to/img.jpg" />
                  </div>
                  <div class="item-inner">
                    <div class="item-title-row">
                      <div class="item-title">Element title</div>
                      <div class="item-after">Element label</div>
                    </div>
                    <div class="item-subtitle">Subtitle</div>
                    <div class="item-text">Additional description text</div>
                  </div>
                </div>
              </li>
            </ul>
          </div>
    p Where:
    ul
      li
        p `item-content` - main flex wrapper for `item-media` and `item-inner`. <strong>Required</strong> element.
      ul
        li
          p `item-media` - container for your media element like icon, image, etc. <strong>Optional</strong> element.
        li
          p `item-inner` - <strong>Required</strong> element.
        ul
          li
            p `item-title-row` - main flex wrapper for `item-title` and `item-after`. <strong>Optional</strong> element.
          ul
            li
              p `item-title` - single-line list item title. <strong>Optional</strong> element.
            li
              p `item-after` - list item label. Could contain any additional HTML elements, like label text, or badge, or switch/toggle or button, etc. <strong>Optional</strong> element.
          li
            p `item-subtitle` - additional single-line title. <strong>Optional</strong> element.
          li
            p `item-text` - additional two-lines container for detailed description. <strong>Optional</strong> element.
    .important-note
      p When you use Link Item (item-link) in media list it will render chevron icon (`>`) at the level of `item-title`. If you want to move this chevron to the center of item, then you need to add `chevron-center` class to this item or to the containing list

    +cssVars('list')

    h2 Examples
    +examplePreview('core', 'list.html', 'list')

extends ../_docs-template

block vars
  - var title = 'Smart select | Framework7 Documentation';

block docs-index

block content


  .docs-nav
    include ../_docs-menu
  .docs-content
    .motion-docs-page-title
      h1 Smart Select
      script(async src="/js/motion/smartselect.js")
      f7-motion-smartselect(motion)

    p Smart select allows you to easily convert your usual form selects to dynamic pages with grouped radio or checkbox inputs. You can see such feature in many native iOS apps
    h2 Smart Select Layout
    p Smart select layout is pretty simple. It is a well known <a href="list-view.html">List View</a> link with `<select>` inside and additional `smart-select` class on `item-link`:
    :code(lang="html")
      <div class="list">
        <ul>
          <!-- Smart select item -->
          <li>
            <!-- Additional "smart-select" class -->
            <span class="item-link smart-select">
              <!-- select -->
              <select name="fruits">
                <option value="apple" selected>Apple</option>
                <option value="pineapple">Pineapple</option>
                ...
              </select>
              <div class="item-content">
                <div class="item-inner">
                  <!-- Select label -->
                  <div class="item-title">Fruit</div>
                  <!-- Selected value, not required -->
                  <div class="item-after">Apple</div>
                </div>
              </div>
            </span>
          </li>
          <!-- Another smart selects or list view elements -->
          ...
        </ul>
      </div>
    .important-note
      p Note that smart select works only in initialized Views, because it used Router to load smart select pages or open modals!
    h3 Custom Option Icons
    p We can specify Smart Select page' list view (option) icons by using `data-option-icon` attributes on `<option>` elements:
    ul
      li `data-option-icon` - if it just a string then will create an icon with this class. If it is in the format of `f7:icon_name` then it will create a F7-Icons icon. If it is in the format of `md:icon_name` then it will create a Material Icons icon
      li `data-option-icon-ios` - same as `data-option-icon` but will apply only when iOS theme is active
      li `data-option-icon-md` - same as `data-option-icon` but will apply only when MD theme is active
    p For example:
    ul
      li `<option data-option-icon="my-icon">` will produce the `<i class="icon my-icon"></i>` list item icon
      li `<option data-option-icon="f7:house_fill">` will produce the `<i class="icon f7-icons">house_fill</i>` list item icon
      li `<option data-option-icon="material:home">` will produce the `<i class="icon material-icons">home</i>` list item icon
      li `<option data-option-icon-ios="f7:house" data-option-icon-md="material:home">` will produce:
        ul
          li `<i class="icon f7-icons">house</i>` - when iOS theme is active
          li `<i class="icon material-icons">home</i>` - when MD theme is active

    h3 Custom Option Colors and Images
    p We can also specify Smart Select page' list view element image or color. We need to use additional `data-option-image` attributes on smart select `<select>` (to set default image for all options) or on `<option>` to set image or icon on single option.
    p For single option we may also use `data-option-color` and `data-option-class` attributes to add specific option color or css class for additional styling
    :code(lang="html")
      <li>
        <span class="item-link smart-select">
          <select name="fruits">
            <option value="apple" selected data-option-image="https://cdn.framework7.io/placeholder/abstract-29x29-1.jpg">Apple</option>
            <option value="pineapple" data-option-image="https://cdn.framework7.io/placeholder/abstract-29x29-2.jpg">Pineapple</option>
            <option value="pear" data-option-color="orange" data-option-image="https://cdn.framework7.io/placeholder/abstract-29x29-3.jpg">Pear</option>
            ...
          </select>
          <div class="item-content">
            <div class="item-inner">
              <div class="item-title">Fruit</div>
            </div>
          </div>
        </span>
      </li>

    h3 Multiple Select And &lt;optgroup&gt;
    p We can also use multiple select and group options using `<optgroup>`. So if we add `multiple` attribute to our select then radio buttons on smart select page will be automatically converted to checkboxes:
    :code(lang="html")
      <li>
        <span class="item-link smart-select">
          <!-- "multiple" attribute for multiple select-->
          <select name="car" multiple>
            <!-- options grouped within "optgroup" tag-->
            <optgroup label="Japanese">
              <option value="honda" selected>Honda</option>
              <option value="lexus">Lexus</option>
              ...
            </optgroup>
            <optgroup label="German">
              <option value="audi" selected>Audi</option>
              <option value="bmw">BMW</option>
              ...
            </optgroup>
            <optgroup label="American">
              <option value="cadillac">Cadillac</option>
              <option value="chrysler">Chrysler</option>
              ...
            </optgroup>
          </select>
          <div class="item-content">
            <div class="item-inner">
              <div class="item-title">Car</div>
            </div>
          </div>
        </span>
      </li>
    h3 Multiple Select and maxlength
    p With multiple select we can also use <b>maxlength</b> attribute to limit number of possible selected items:
    :code(lang="html")
      <li>
        <span class="item-link smart-select">
          <!-- "maxlength" attribute to limit number of possible selected items -->
          <!-- we won't allow to select more than 3 items -->
          <select name="car" multiple maxlength="3">
            <optgroup label="Japanese">
              <option value="honda" selected>Honda</option>
              <option value="lexus">Lexus</option>
              ...
            </optgroup>
            <optgroup label="German">
              <option value="audi">Audi</option>
              <option value="bmw">BMW</option>
              ...
            </optgroup>
            <optgroup label="American">
              <option value="cadillac">Cadillac</option>
              <option value="chrysler">Chrysler</option>
              ...
            </optgroup>
          </select>
          <div class="item-content">
            <div class="item-inner">
              <div class="item-title">Car</div>
            </div>
          </div>
        </span>
      </li>
    h3 Different Display Value
    p Using `data-display-as` attribute on options we can show selected value in different way:
    :code(lang="html")
      <li>
        <span class="item-link smart-select">
          <select name="days">
            <option value="monday" selected data-display-as="Mon">Monday</option>
            <option value="tuesday" data-display-as="Tue">Tuesday</option>
            <option value="wednesday" data-display-as="Wed">Wednesday</option>
            <option value="thursday" data-display-as="Thu">Thursday</option>
            <option value="friday" data-display-as="Fri">Friday</option>
            <option value="saturday" data-display-as="Sat">Saturday</option>
            <option value="sunday" data-display-as="Sun">Sunday</option>
          </select>
          <div class="item-content">
            <div class="item-inner">
              <div class="item-title">Day</div>
            </div>
          </div>
        </span>
      </li>
    h2 Smart Select App Methods
    p Let's look at related App methods to work with Smart Select:
    .method-wrap
      p
        span.method app.smartSelect.create(<span>parameters</span>)
        | - create Smart Select instance
      ul.method-parameters
        li
          span.parameter parameters
          |  - <span class="parameter-type">object</span>. Object with smart select parameters
      p.method-returns Method returns created Smart Select's instance

    .method-wrap
      p
        span.method app.smartSelect.destroy(<span>smartSelectEl</span>)
        | - destroy Smart Select instance
      ul.method-parameters
        li
          span.parameter smartSelectEl
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) or <span class="parameter-type">object</span>. Smart Select element or Smart Select instance to destroy.
    .method-wrap
      p
        span.method app.smartSelect.get(<span>smartSelectEl</span>)
        | - get Smart Select instance by HTML element
      ul.method-parameters
        li
          span.parameter smartSelectEl
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Smart Select element.
      p.method-returns Method returns Smart Select's instance
    .method-wrap
      p
        span.method app.smartSelect.open(<span>smartSelectEl</span>)
        | - opens Smart Select
      ul.method-parameters
        li
          span.parameter smartSelectEl
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Smart Select element to open.
      p.method-returns Method returns Smart Select's instance
    .method-wrap
      p
        span.method app.smartSelect.close(<span>smartSelectEl</span>)
        | - closes Smart Select
      ul.method-parameters
        li
          span.parameter smartSelectEl
          |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector). Smart Select element to close.
      p.method-returns Method returns Smart Select's instance

    h2 Smart Select Parameters
    p Now let's look at list of available parameters we need to create Smart Select:
    table.params-table
      thead
        tr
          th Parameter
          th Type
          th Default
          th Description
      tbody
        tr
          td el
          td HTMLElement
          td
          td Smart Select element. Can be useful if you already have Smart Select element in your HTML and want to create new instance using this element
        tr
          td view
          td object
          td
          td Link to initialized View instance which is required for Smart Select to work. By default, if not specified, it will be opened in parent View.
        tr
          td valueEl
          td HTMLElement
          td
          td Visual element where to insert selected value. If not passed then it will look for `<div class="item-after">` element
        tr
          td setValueText
          td boolean
          td true
          td When enabled then smart select will automatically insert value text into specified "valueEl" in format returned by "formatValueText"
        tr
          td formatValueText
          td function(values)
          td
          td Custom function to format smart select text value that appears on list item (in `<div class="item-after">`). `values` is the array of current values
        tr
          td openIn
          td string
          td page
          td Defines how to open Smart Select. Can be `page` or `popup` or `popover` or `sheet`
        tr
          td popupPush
          td boolean
          td false
          td Enables smart select popup to push view/s behind on open
        tr
          td popupSwipeToClose
          td boolean
          td undefined
          td Enables ability to close smart select popup with swipe. When not specified it inherits app's Popup `swipeToClose` parameter
        tr
          td sheetPush
          td boolean
          td false
          td Enables smart select sheet to push view/s behind on open
        tr
          td sheetSwipeToClose
          td boolean
          td undefined
          td Enables ability to close smart select sheet with swipe. When not specified it inherits app's Sheet `swipeToClose` parameter
        tr
          td sheetBackdrop
          td boolean
          td false
          td Enables smart select sheet backdrop
        tr
          td pageTitle
          td string
          td
          td Smart select page title. If not passed then it will be the `<div class="item-title">` text
        tr
          td pageBackLinkText
          td string
          td Back
          td Smart select Page back link text
        tr
          td popupCloseLinkText
          td string
          td Close
          td Smart select Popup close link text
        tr
          td popupTabletFullscreen
          td boolean
          td false
          td When enabled smart select popup will be displayed as full screen on tablets
        tr
          td sheetCloseLinkText
          td string
          td Done
          td Smart select Sheet close link text
        tr
          td searchbar
          td boolean<br>object
          td false
          td Enables Searchbar on smart select page. If passed as object then it should be valid <a href="./searchbar.html#searchbar-parameters">Searchbar parameters</a>
        tr
          td searchbarPlaceholder
          td string
          td Search
          td Searchbar placeholder text
        tr
          td searchbarDisableText
          td string
          td Cancel
          td Searchbar "cancel" link text. Has effect only in iOS theme
        tr
          td searchbarSpellcheck
          td boolean
          td false
          td Sets value of `spellcheck` attribute on Searchbar's input element
        tr
          td appendSearchbarNotFound
          td boolean<br>string<br>HTMLElement
          td false
          td Appends block with content that displayed when there are no Searchbar results.
            p If specified as string then it will append:
            :code(lang="html")
              <div class="block searchbar-not-found">{{appendSearchbarNotFound}}</div>
            p If specified as `true` then:
            :code(lang="html")
              <div class="block searchbar-not-found">Nothing found</div>
            p If `HTMLElement` passed then it will add that element.
        tr
          td closeOnSelect
          td boolean
          td false
          td If enabled then smart select will be automatically closed after user selectes any option
        tr
          td virtualList
          td boolean
          td false
          td Enable Virtual List for smart select if your select has a lot (hundreds, thousands) of options
        tr
          td virtualListHeight
          td number<br>function
          td
          td Virtual list item height. If `number` - list item height in px. If `function` then function should return item height.
        tr
          td scrollToSelectedItem
          td boolean
          td false
          td When enabled it will scroll smart select content to first selected item on open
        tr
          td formColorTheme
          td string
          td
          td Smart select page form color theme. One of the <a href="color-themes.html">default colors</a>
        tr
          td navbarColorTheme
          td string
          td
          td Smart select navbar color theme. One of the <a href="color-themes.html">default colors</a>
        tr
          td routableModals
          td boolean
          td false
          td Will add opened smart select modal (when `openIn` is `popup`, `popover` or `sheet`) to router history which gives ability to close smart select by going back in router history and set current route to the smart select modal.
        tr
          td url
          td string
          td select/
          td Smart select page/modal URL that will be set as a current route
        tr
          td cssClass
          td string
          td
          td Additional CSS class name to be set on Smart Select container (Page, Popup, Popover or Sheet)
        tr
          td closeByBackdropClick
          td boolean
          td true
          td When enabled, Smart Select modal (Popover, Popup, Sheet) will be closed on backdrop click
        tr
          td inputIconPosition
          td string
          td 'start'
          td Select option checkbox or radio icon position. Can be `'start'` or `'end'`. Also can be set on each option via `data-input-icon-position` attribute
        tr
          td optionIcon
          td string
          td
          td Select option icon to be set on all options. If it just a string then will create an icon with this class. If it is in the format of `f7:icon_name` then it will create a F7-Icons icon. If it is in the format of `md:icon_name` then it will create a Material Icons icon
        tr
          td optionIconIos
          td string
          td
          td Same as `optionIcon` but will apply only when iOS theme is active
        tr
          td optionIconMd
          td string
          td
          td Same as `optionIcon` but will apply only when MD theme is active
        tr
          th(colspan="4") Render functions
        tr
          td renderSearchbar
          td function
          td
          td Function to render smart select searchbar dropdown, must return searchbar HTML string
        tr
          td renderItem
          td function(item, index)
          td
          td Function to render smart select item, must return item HTML string
        tr
          td renderItems
          td function(items)
          td
          td Function to render all smart select items, must return all items HTML string
        tr
          td renderPage
          td function(items)
          td
          td Function to render smart select page, must return full page HTML string
        tr
          td renderPopup
          td function(items)
          td
          td Function to render smart select popup, must return full popup HTML string
        tr
          td renderSheet
          td function(items)
          td
          td Function to render smart select sheet, must return full sheet HTML string
        tr
          td renderPopover
          td function(items)
          td
          td Function to render smart select popover, must return full popover HTML string
        tr
          th(colspan="4") Events
        tr
          td on
          td object
          td
          td
            p Object with events handlers. For example:
            :code(lang="js")
              var smartSelect = app.smartSelect.create({
                ...
                on: {
                  opened: function () {
                    console.log('Smart select opened')
                  }
                }
              })

    .important-note
      p Note that all following parameters can be used in global app parameters under `smartSelect` property to set defaults for all smart selects. For example:
      :code(lang="js")
        var app = new Framework7({
          smartSelect: {
            pageTitle: 'Select Option',
            openIn: 'popup',
          }
        });
    h2 Smart Select Methods & Properties
    p So to create Smart Select we have to call:
    :code(lang="js")
          var smartSelect = app.smartSelect.create({ /* parameters */ })
    p After that we have its initialized instance (like `smartSelect` variable in example above) with useful methods and properties:
    table.methods-table
      tbody
        tr
          th(colspan="2") Properties
        tr
          td smartSelect.app
          td Link to global app instance
        tr
          td smartSelect.el
          td Smart select HTML element
        tr
          td smartSelect.$el
          td Dom7 instance with smart select HTML element
        tr
          td smartSelect.valueEl
          td HTML element used to display value
        tr
          td smartSelect.$valueEl
          td Dom7 instance with HTML element used to display value
        tr
          td smartSelect.selectEl
          td Child select element `<select>`
        tr
          td smartSelect.$selectEl
          td Dom7 instance with child select element
        tr
          td smartSelect.url
          td Smart Select URL (that was passed in `url` parameter)
        tr
          td smartSelect.view
          td Smart Select View (that was passed in `view` parameter) or found parent view
        tr
          td smartSelect.params
          td Smart Select parameters
        tr
          th(colspan="2") Methods
        tr
          td smartSelect.open()
          td Open smart select
        tr
          td smartSelect.close()
          td Close smart select
        tr
          td smartSelect.getValue()
          td Returns smart select value. In case of select is `multiple` it returns array with selected values
        tr
          td smartSelect.setValue(<span>newValue</span>)
          td Set new smart select value. In case of select is `multiple` it must be an array with new values
        tr
          td smartSelect.unsetValue()
          td Unset smart select value
        tr
          td smartSelect.scrollToSelectedItem()
          td Scroll smart select content to first selected item (when opened)
        tr
          td smartSelect.destroy()
          td Destroy smart select
        tr
          td smartSelect.on(<span>event</span>, <span>handler</span>)
          td Add event handler
        tr
          td smartSelect.once(<span>event</span>, <span>handler</span>)
          td Add event handler that will be removed after it was fired
        tr
          td smartSelect.off(<span>event</span>, <span>handler</span>)
          td Remove event handler
        tr
          td smartSelect.off(<span>event</span>)
          td Remove all handlers for specified event
        tr
          td smartSelect.emit(<span>event</span>, <span>...args</span>)
          td Fire event on instance
    h2 Smart Select Events
    p Smart Select will fire the following DOM events on smart select element and events on app and smart select instance:
    h3 DOM Events
    table.events-table
      thead
        tr
          th Event
          th Target
          th Description
      tbody
        tr
          td smartselect:beforeopen
          td Smart Select Element<span>&lt;a class="item-link smart-select"&gt;</span>
          td Event will be triggered before Smart Select open. `event.detail.prevent` contains function that will prevent Smart Select from opening when called
        tr
          td smartselect:open
          td Smart Select Element<span>&lt;a class="item-link smart-select"&gt;</span>
          td Event will be triggered when Smart Select page (or modal) starts its opening animation
        tr
          td smartselect:opened
          td Smart Select Element<span>&lt;a class="item-link smart-select"&gt;</span>
          td Event will be triggered after Smart Select page (or modal) completes its opening animation
        tr
          td smartselect:close
          td Smart Select Element<span>&lt;a class="item-link smart-select"&gt;</span>
          td Event will be triggered when Smart Select page (or modal) starts its closing animation
        tr
          td smartselect:closed
          td Smart Select Element<span>&lt;a class="item-link smart-select"&gt;</span>
          td Event will be triggered after Smart Select page (or modal) completes its closing animation
        tr
          td smartselect:beforedestroy
          td Smart Select Element<span>&lt;a class="item-link smart-select"&gt;</span>
          td Event will be triggered right before Smart Select instance will be destroyed
    h3 App and Smart Select Instance Events
    p Smart Select instance emits events on both self instance and app instance. App instance events has same names prefixed with `smartSelect`.
    table.events-table.double-events-table
      thead
        tr
          th Event
          th Target
          th Arguments
          th Description
      tbody
        tr
          td beforeOpen
          td smartSelect
          td(rowspan="2") <span>(smartSelect, prevent)</span>
          td(rowspan="2") Event will be triggered before Smart Select open. As an argument event handler receives smart select instance and function that will prevent Smart Select from opening when called
        tr
          td smartSelectBeforeOpen
          td app
        tr
          td open
          td smartSelect
          td(rowspan="2") <span>(smartSelect)</span>
          td(rowspan="2") Event will be triggered when Smart Select starts its opening animation. As an argument event handler receives smart select instance
        tr
          td smartSelectOpen
          td app
        tr
          td opened
          td smartSelect
          td(rowspan="2") <span>(smartSelect)</span>
          td(rowspan="2") Event will be triggered after Smart Select completes its opening animation. As an argument event handler receives smart select instance
        tr
          td smartSelectOpened
          td app
        tr
          td close
          td smartSelect
          td(rowspan="2") <span>(smartSelect)</span>
          td(rowspan="2") Event will be triggered when Smart Select starts its closing animation. As an argument event handler receives smart select instance
        tr
          td smartSelectClose
          td app
        tr
          td closed
          td smartSelect
          td(rowspan="2") <span>(smartSelect)</span>
          td(rowspan="2") Event will be triggered after Smart Select completes its closing animation. As an argument event handler receives smart select instance
        tr
          td smartSelectClosed
          td app
        tr
          td beforeDestroy
          td smartSelect
          td(rowspan="2") <span>(smartSelect)</span>
          td(rowspan="2") Event will be triggered right before Smart Select instance will be destroyed. As an argument event handler receives smart select instance
        tr
          td smartSelectBeforeDestroy
          td app

    h2 Smart Select Auto Initialization
    p If you don't need to use Smart Select API and your Smart Select is inside of the page and presented in DOM on moment of page initialization then it can be auto initialized with just adding additional `smart-select-init` class:
    :code(lang="html")
      <li>
        <!-- Add smart-select-init class -->
        <span class="item-link smart-select smart-select-init">
          <!-- select -->
          <select name="fruits">
            <option value="apple" selected>Apple</option>
            <option value="pineapple">Pineapple</option>
            ...
          </select>
          <div class="item-content">
            <div class="item-inner">
              <div class="item-title">Fruit</div>
              <div class="item-after">Apple</div>
            </div>
          </div>
        </span>
      </li>
    p In this case if you need to access created Smart Select instance you can use the `app.smartSelect.get` app method:
    :code(lang="js")
          var smartSelect = app.smartSelect.get('.smart-select');

    p When using auto init you may need to pass additional parameters. In this case you may pass all additional parameters via `data-` attributes on smart select element:
    :code(lang="html")
      <li>
        <!-- Pass parameters as kebab-case data attributes -->
        <span class="item-link smart-select smart-select-init" data-open-in="popup" data-virtual-list="true" data-page-back-link-text="Go back">
          <!-- select -->
          <select name="fruits">
            <option value="apple" selected>Apple</option>
            <option value="pineapple">Pineapple</option>
            ...
          </select>
          <div class="item-content">
            <div class="item-inner">
              <div class="item-title">Fruit</div>
              <div class="item-after">Apple</div>
            </div>
          </div>
        </span>
      </li>

    +cssVars('smart-select')


    h2 Examples
    +examplePreview('core', 'smart-select.html', 'smart-select')
